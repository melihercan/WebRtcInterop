import("../webrtc.gni")

declare_args() {
  libwebrtc_intel_media_sdk = false
  libwebrtc_desktop_capture = true
}

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
} else if (is_mac) {
  import("//build/config/mac/rules.gni")
} else if (is_ios) {
  import("//build/config/ios/rules.gni")
}

config("external_config") {
  include_dirs = [ "include" ]
  if (is_win) {
    defines = [ "LIB_WEBRTC_API_DLL" ]
  }
}

rtc_shared_library("libwebrtc") {
  libs = []
  include_dirs = [
    ".",
    "include",
  ]

  defines = [
    "USE_LIBYUV",
    "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
  ]

  if (is_win) {
    defines += [
      "LIB_WEBRTC_API_EXPORTS",
      "WEBRTC_WIN",
    ]
  }

  if (is_linux) {
    defines += [
      "WEBRTC_LINUX",
      "WEBRTC_POSIX",
    ]
  }

  public_configs = [ ":external_config" ]

  sources = [
    "include/Interop.h",
    "src/Interop.cc",
  ]

  # intel media sdk
  if (is_win && libwebrtc_intel_media_sdk) {
    sources += [
    ]
    include_dirs += [ ]
    defines += [ "USE_INTEL_MEDIA_SDK" ]
    configs += [  ]
    libs += [
    ]
    lib_dirs = [  ]
    ldflags = [
      "/ignore:4098",
      "/ignore:4099",
    ]
  }

  if (is_win && is_clang) {
    cflags = [
      "-Wno-microsoft-extra-qualification",
      "-Wno-reorder",
    ]
  }
  if (is_clang) {
    # Suppress warnings from the Chromium Clang plugin (bugs.webrtc.org/163).
    #suppressed_configs += [ "//build/config/clang:find_bad_constructs" ]
  }

  deps = [
    "../api:create_peerconnection_factory",
    "../api:libjingle_peerconnection_api",
    "../api/audio_codecs:builtin_audio_decoder_factory",
    "../api/audio_codecs:builtin_audio_encoder_factory",
    "../api/crypto:frame_crypto_transformer",
    "../api/video:video_frame",
    "../api/video_codecs:builtin_video_decoder_factory",
    "../api/video_codecs:builtin_video_encoder_factory",
    "../media:rtc_audio_video",
    "../media:rtc_internal_video_codecs",
    "../media:rtc_media",
    "../media:rtc_media_base",
    "../modules/audio_device:audio_device",
    "../modules/audio_processing:api",
    "../modules/audio_processing:audio_processing",
    "../modules/video_capture:video_capture_module",
    "../pc:libjingle_peerconnection",
    "../rtc_base:rtc_base",
    "../sdk:media_constraints",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/boringssl:boringssl",
    "//third_party/libyuv",
  ]

  # screen capture device
  if (libwebrtc_desktop_capture) {
    defines += [ "RTC_DESKTOP_DEVICE" ]
    sources += [
    ]
    deps += [
      "../modules/desktop_capture",
      "//third_party/libjpeg_turbo:libjpeg",
    ]
  }
}
